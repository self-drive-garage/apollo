/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: GPSData.idl
  Source: GPSData.hpp
  Cyclone DDS: v0.10.5

*****************************************************************/
#ifndef DDSCXX_GPSDATA_HPP
#define DDSCXX_GPSDATA_HPP

#include <cstdint>

namespace platform
{
namespace sensors
{
class GPSData
{
private:
 double latitude_ = 0.0;
 double longitude_ = 0.0;
 double altitude_ = 0.0;
 double speed_ = 0.0;
 double track_ = 0.0;
 double climb_ = 0.0;
 int64_t timestamp_nanoseconds_ = 0;
 bool valid_ = false;
 int64_t status_ = 0;

public:
  GPSData() = default;

  explicit GPSData(
    double latitude,
    double longitude,
    double altitude,
    double speed,
    double track,
    double climb,
    int64_t timestamp_nanoseconds,
    bool valid,
    int64_t status) :
    latitude_(latitude),
    longitude_(longitude),
    altitude_(altitude),
    speed_(speed),
    track_(track),
    climb_(climb),
    timestamp_nanoseconds_(timestamp_nanoseconds),
    valid_(valid),
    status_(status) { }

  double latitude() const { return this->latitude_; }
  double& latitude() { return this->latitude_; }
  void latitude(double _val_) { this->latitude_ = _val_; }
  double longitude() const { return this->longitude_; }
  double& longitude() { return this->longitude_; }
  void longitude(double _val_) { this->longitude_ = _val_; }
  double altitude() const { return this->altitude_; }
  double& altitude() { return this->altitude_; }
  void altitude(double _val_) { this->altitude_ = _val_; }
  double speed() const { return this->speed_; }
  double& speed() { return this->speed_; }
  void speed(double _val_) { this->speed_ = _val_; }
  double track() const { return this->track_; }
  double& track() { return this->track_; }
  void track(double _val_) { this->track_ = _val_; }
  double climb() const { return this->climb_; }
  double& climb() { return this->climb_; }
  void climb(double _val_) { this->climb_ = _val_; }
  int64_t timestamp_nanoseconds() const { return this->timestamp_nanoseconds_; }
  int64_t& timestamp_nanoseconds() { return this->timestamp_nanoseconds_; }
  void timestamp_nanoseconds(int64_t _val_) { this->timestamp_nanoseconds_ = _val_; }
  bool valid() const { return this->valid_; }
  bool& valid() { return this->valid_; }
  void valid(bool _val_) { this->valid_ = _val_; }
  int64_t status() const { return this->status_; }
  int64_t& status() { return this->status_; }
  void status(int64_t _val_) { this->status_ = _val_; }

  bool operator==(const GPSData& _other) const
  {
    (void) _other;
    return latitude_ == _other.latitude_ &&
      longitude_ == _other.longitude_ &&
      altitude_ == _other.altitude_ &&
      speed_ == _other.speed_ &&
      track_ == _other.track_ &&
      climb_ == _other.climb_ &&
      timestamp_nanoseconds_ == _other.timestamp_nanoseconds_ &&
      valid_ == _other.valid_ &&
      status_ == _other.status_;
  }

  bool operator!=(const GPSData& _other) const
  {
    return !(*this == _other);
  }

};

}

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::platform::sensors::GPSData>::getTypeName()
{
  return "platform::sensors::GPSData";
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::platform::sensors::GPSData>::type_map_blob_sz() { return 558; }
template<> constexpr unsigned int TopicTraits<::platform::sensors::GPSData>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::platform::sensors::GPSData>::type_map_blob() {
  static const uint8_t blob[] = {
 0xbb,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0x91,  0xad,  0xce,  0x18,  0x95,  0x30,  0x04, 
 0xfe,  0x04,  0xad,  0xc7,  0x89,  0xe9,  0xee,  0x00,  0xa3,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x93,  0x00,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x28,  0xc1,  0xe3,  0x7e,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0xba,  0x56,  0x9b,  0x80,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x14,  0xd8,  0x93,  0x30,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0xce,  0x4e,  0xf3,  0xec,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x36,  0x8c,  0xc7,  0xb1,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x28,  0xb3,  0xda,  0x6a,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x31,  0x00,  0x05,  0xe0,  0x2f,  0x85,  0x11,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00,  0x01,  0x00,  0x01,  0x9f,  0x7d,  0x0e,  0xe8,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00,  0x01,  0x00,  0x05,  0x9a,  0xcb,  0x44,  0x54,  0x00, 
 0x41,  0x01,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x6c,  0x0d,  0xc9,  0x63,  0x1f,  0x73,  0x8d, 
 0xf9,  0x10,  0xb5,  0xa4,  0xba,  0x3e,  0xa6,  0x00,  0x29,  0x01,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x23,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1b,  0x00,  0x00,  0x00,  0x70,  0x6c,  0x61,  0x74, 
 0x66,  0x6f,  0x72,  0x6d,  0x3a,  0x3a,  0x73,  0x65,  0x6e,  0x73,  0x6f,  0x72,  0x73,  0x3a,  0x3a,  0x47, 
 0x50,  0x53,  0x44,  0x61,  0x74,  0x61,  0x00,  0x00,  0xf9,  0x00,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00, 
 0x17,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x09,  0x00,  0x00,  0x00, 
 0x6c,  0x61,  0x74,  0x69,  0x74,  0x75,  0x64,  0x65,  0x00,  0x00,  0x00,  0x00,  0x18,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x0a,  0x00,  0x00,  0x00,  0x6c,  0x6f,  0x6e,  0x67, 
 0x69,  0x74,  0x75,  0x64,  0x65,  0x00,  0x00,  0x00,  0x17,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x0a,  0x00,  0x09,  0x00,  0x00,  0x00,  0x61,  0x6c,  0x74,  0x69,  0x74,  0x75,  0x64,  0x65, 
 0x00,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00, 
 0x06,  0x00,  0x00,  0x00,  0x73,  0x70,  0x65,  0x65,  0x64,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x06,  0x00,  0x00,  0x00,  0x74,  0x72,  0x61,  0x63, 
 0x6b,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00, 
 0x06,  0x00,  0x00,  0x00,  0x63,  0x6c,  0x69,  0x6d,  0x62,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x06,  0x00,  0x00,  0x00,  0x31,  0x00,  0x05,  0x00,  0x16,  0x00,  0x00,  0x00,  0x74,  0x69,  0x6d,  0x65, 
 0x73,  0x74,  0x61,  0x6d,  0x70,  0x5f,  0x6e,  0x61,  0x6e,  0x6f,  0x73,  0x65,  0x63,  0x6f,  0x6e,  0x64, 
 0x73,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00,  0x01,  0x00,  0x01,  0x00, 
 0x06,  0x00,  0x00,  0x00,  0x76,  0x61,  0x6c,  0x69,  0x64,  0x00,  0x00,  0x00,  0x15,  0x00,  0x00,  0x00, 
 0x08,  0x00,  0x00,  0x00,  0x01,  0x00,  0x05,  0x00,  0x07,  0x00,  0x00,  0x00,  0x73,  0x74,  0x61,  0x74, 
 0x75,  0x73,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0xf2,  0x6c,  0x0d,  0xc9,  0x63,  0x1f,  0x73,  0x8d,  0xf9,  0x10,  0xb5,  0xa4,  0xba,  0x3e,  0xa6,  0xf1, 
 0x91,  0xad,  0xce,  0x18,  0x95,  0x30,  0x04,  0xfe,  0x04,  0xad,  0xc7,  0x89,  0xe9,  0xee, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::platform::sensors::GPSData>::type_info_blob() {
  static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x91,  0xad,  0xce,  0x18,  0x95,  0x30,  0x04,  0xfe,  0x04,  0xad,  0xc7, 
 0x89,  0xe9,  0xee,  0x00,  0xa7,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x6c,  0x0d,  0xc9,  0x63,  0x1f,  0x73,  0x8d,  0xf9,  0x10,  0xb5,  0xa4, 
 0xba,  0x3e,  0xa6,  0x00,  0x2d,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::platform::sensors::GPSData>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::platform::sensors::GPSData>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::platform::sensors::GPSData)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::platform::sensors::GPSData>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::platform::sensors::GPSData& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.latitude()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.longitude()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.altitude()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.speed()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.track()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.climb()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.timestamp_nanoseconds()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 7:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.valid()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 8:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.status()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::platform::sensors::GPSData& instance, bool as_key) {
  auto &props = get_type_props<::platform::sensors::GPSData>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::platform::sensors::GPSData& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.latitude()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.longitude()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.altitude()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.speed()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.track()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.climb()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.timestamp_nanoseconds()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 7:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.valid()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 8:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.status()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::platform::sensors::GPSData& instance, bool as_key) {
  auto &props = get_type_props<::platform::sensors::GPSData>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::platform::sensors::GPSData& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.latitude()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.longitude()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.altitude()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.speed()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.track()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.climb()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.timestamp_nanoseconds()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 7:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.valid()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 8:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.status()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::platform::sensors::GPSData& instance, bool as_key) {
  auto &props = get_type_props<::platform::sensors::GPSData>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::platform::sensors::GPSData& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.latitude()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.longitude()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.altitude()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.speed()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.track()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.climb()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.timestamp_nanoseconds()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 7:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.valid()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 8:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.status()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::platform::sensors::GPSData& instance, bool as_key) {
  auto &props = get_type_props<::platform::sensors::GPSData>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_GPSDATA_HPP
